using UnityEngine;
using Fusion;
using System;

public class CrocodileTooth : NetworkBehaviour
{
    public int toothIndex;
    private SpriteRenderer spriteRenderer;

    public Sprite normalSprite;
    public Sprite downSprite;

    [SerializeField] private CrocodileMouth crocodileMouth;
    [SerializeField] private CrocodileGameManager gameManager;

    [Networked]
    private bool isClicked { get; set; }

    [Networked]
    private bool isTrap { get; set; }

    [Networked]
    private bool isGameEnded { get; set; }

    // Ïù¥Ï†Ñ ÏÉÅÌÉú Ï∂îÏ†ÅÏö© (Î≥ÄÍ≤Ω Í∞êÏßÄ)
    private bool previousIsClicked = false;
    private bool previousIsGameEnded = false;

    public event Action<int> OnToothClicked;

    private void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        if (spriteRenderer == null)
        {
            // Debug.LogError($"‚ùå SpriteRendererÍ∞Ä ÏóÜÏäµÎãàÎã§! GameObject: {gameObject.name}");
        }
    }

    public override void Spawned()
    {
        // Debug.Log($"ü¶∑ Ïù¥Îπ® {toothIndex} Spawned, HasStateAuthority: {Object.HasStateAuthority}");
        UpdateVisuals();
    }

    [Rpc(RpcSources.StateAuthority, RpcTargets.All)]
    public void RPC_SetTrap(bool trap)
    {
        isTrap = trap;

        if (isTrap)
        {
            Debug.Log($"üß® Ïù¥Îπ® {toothIndex}Ïù¥ Ìä∏Îû©ÏúºÎ°ú ÏÑ§Ï†ïÎê®!");
        }
    }

    // Î™®Îì† ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú StateAuthorityÎ°ú ÌÅ¥Î¶≠ ÏöîÏ≤≠
    [Rpc(RpcSources.All, RpcTargets.StateAuthority)]
    private void RPC_RequestClickTooth(int requesterPlayerId)
    {
        // Debug.Log($"üîÑ Ïù¥Îπ® {toothIndex} ÌÅ¥Î¶≠ ÏöîÏ≤≠ Î∞õÏùå from player {requesterPlayerId}");
        
        // StateAuthorityÏóêÏÑúÎßå Ïã§Ï†ú Ï≤òÎ¶¨
        if (Object.HasStateAuthority && !isClicked && !isGameEnded)
        {
            // Ï¶âÏãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            isClicked = true;
            
            // Î™®Îì† ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÍ≤å Í≤∞Í≥º Ï†ÑÏÜ°
            RPC_ExecuteClickTooth(isTrap);
        }
    }

    // StateAuthorityÏóêÏÑú Î™®Îì† ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î°ú Í≤∞Í≥º Ï†ÑÏÜ°
    [Rpc(RpcSources.StateAuthority, RpcTargets.All)]
    private void RPC_ExecuteClickTooth(bool wasTrap)
    {
        // Debug.Log($"üñ±Ô∏è Ïù¥Îπ® {toothIndex} ÌÅ¥Î¶≠ Ï≤òÎ¶¨. Ìä∏Îû©Ïù∏Í∞Ä? {wasTrap}");

        // ÏÉÅÌÉú ÌôïÏã§Ìûà ÎèôÍ∏∞Ìôî
        isClicked = true;
        
        // Ï¶âÏãú ÏãúÍ∞ÅÏ†Å ÏóÖÎç∞Ïù¥Ìä∏
        UpdateVisuals();

        if (wasTrap)
        {
            // Debug.Log($"üí• Ìä∏Îû© Ïù¥Îπ® ÎàåÎ¶º! Í≤åÏûÑ Ï¢ÖÎ£å Ï≤òÎ¶¨ ÏãúÏûë");
            
            isGameEnded = true;
            UpdateVisuals(); // Í≤åÏûÑ Ï¢ÖÎ£å ÏÉÅÌÉú Ï¶âÏãú Î∞òÏòÅ
            
            crocodileMouth?.CloseMouth();
          
            // StateAuthorityÏóêÏÑúÎßå Í≤åÏûÑ Ï¢ÖÎ£å Ï≤òÎ¶¨
            if (Object.HasStateAuthority)
            {
                gameManager?.EndGame();
            }
        }
    }

    [Rpc(RpcSources.StateAuthority, RpcTargets.All)]
    public void RPC_EndGame()
    {
        isGameEnded = true;
        UpdateVisuals();
        // Debug.Log($"üî• Ïù¥Îπ® {toothIndex} Í≤åÏûÑ Ï¢ÖÎ£å Ï≤òÎ¶¨Îê®");
    }

    // StateAuthorityÍ∞Ä ÏïÑÎãå Í≥≥ÏóêÏÑú Í≤åÏûÑ Ï¢ÖÎ£åÎ•º ÏöîÏ≤≠Ìï† Îïå ÏÇ¨Ïö©
    public void RequestEndGame()
    {
        if (Object.HasStateAuthority)
        {
            RPC_EndGame();
        }
        else
        {
            // StateAuthorityÏóêÍ≤å Í≤åÏûÑ Ï¢ÖÎ£å ÏöîÏ≤≠
            RPC_RequestEndGame();
        }
    }

    [Rpc(RpcSources.All, RpcTargets.StateAuthority)]
    private void RPC_RequestEndGame()
    {
        if (Object.HasStateAuthority)
        {
            RPC_EndGame();
        }
    }

    public void UpdateVisuals()
    {
        if (spriteRenderer == null) return;

        if (isGameEnded)
        {
            spriteRenderer.color = new Color(1f, 1f, 1f, 0.3f);
            gameObject.SetActive(false);
            return;
        }

        spriteRenderer.sprite = isClicked ? downSprite : normalSprite;
        spriteRenderer.color = Color.white;
        
        // Debug.Log($"üé® Ïù¥Îπ® {toothIndex} ÏãúÍ∞ÅÏ†Å ÏóÖÎç∞Ïù¥Ìä∏: {(isClicked ? "DOWN" : "UP")}");
    }

    private void OnMouseDown()
    {
        if (isClicked || isGameEnded) return;
        OnToothClicked?.Invoke(toothIndex);
    }

    public void ProcessClick()
    {
        Debug.Log($"ProcessClick called on tooth {toothIndex} by {Runner.LocalPlayer.RawEncoded}");
        
        // Ïù¥ÎØ∏ ÌÅ¥Î¶≠ÎêòÏóàÍ±∞ÎÇò Í≤åÏûÑÏù¥ ÎÅùÎÇ¨ÏúºÎ©¥ Î¨¥Ïãú
        if (isClicked || isGameEnded) return;
        
        int playerId = Runner.LocalPlayer.RawEncoded;
        RPC_RequestClickTooth(playerId);
        
        // Debug.Log($"‚úÖ Ïù¥Îπ® {toothIndex} ÌÅ¥Î¶≠ ÏöîÏ≤≠ Ï†ÑÏÜ°Îê®");
    }

    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ Î∞è ÏãúÍ∞ÅÏ†Å ÏóÖÎç∞Ïù¥Ìä∏
    public override void Render()
    {
        // ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ
        bool stateChanged = false;
        
        if (previousIsClicked != isClicked)
        {
            previousIsClicked = isClicked;
            stateChanged = true;
            // Debug.Log($"üîÑ Ïù¥Îπ® {toothIndex} ÌÅ¥Î¶≠ ÏÉÅÌÉú Î≥ÄÍ≤Ω: {isClicked}");
        }
        
        if (previousIsGameEnded != isGameEnded)
        {
            previousIsGameEnded = isGameEnded;
            stateChanged = true;
            // Debug.Log($"üîÑ Ïù¥Îπ® {toothIndex} Í≤åÏûÑ Ï¢ÖÎ£å ÏÉÅÌÉú Î≥ÄÍ≤Ω: {isGameEnded}");
        }
        
        // ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎêú Í≤ΩÏö∞ÏóêÎßå ÏãúÍ∞ÅÏ†Å ÏóÖÎç∞Ïù¥Ìä∏
        if (stateChanged)
        {
            UpdateVisuals();
        }
    }

    public bool IsClicked() => isClicked;
    public bool IsTrap() => isTrap;
    public bool IsGameEnded() => isGameEnded;

    public void ResetTooth()
    {
        if (Object.HasStateAuthority)
        {
            isClicked = false;
            isGameEnded = false;
            gameObject.SetActive(true);
            UpdateVisuals();
        }
    }

    [ContextMenu("Force Click (Debug)")]
    private void DebugForceClick()
    {
        if (Object.HasStateAuthority && !isClicked && !isGameEnded)
        {
            isClicked = true;
            RPC_ExecuteClickTooth(isTrap);
        }
    }
}